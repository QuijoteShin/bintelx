# bintelx/config/server/dev.local.crt;

# incorporating HTTP/3 (QUIC), HTTP/2, SSL, and backend proxying.
upstream bintelx_front  {
  server 172.24.168.52:8080 max_fails=1 fail_timeout=1; # bintelx node.js server is listening on for signaling.
  server 172.24.168.52:8081 backup;
}

# Upstream for the API backend, supporting PHP (primary & backup) and Python (fallback).
upstream api_backend {
  server unix:/run/php/php8.4-fpm.sock;

}
# SSE WS
upstream stream_backend {
  server 127.0.0.1:8000; # max_fails=2 fail_timeout=30s; # Python ASGI backend (Hypercorn/FastAPI/Uvicorn/Starlette)
  #server 192.168.1.11:9000 weight=5; backup; # Replace with your backup PHP-FPM server IP and port
}

# Upstream for the dedicated WebRTC signaling server (webrtc-rs)
upstream webrtc_signaling_server {
  server 127.0.0.1:9000; # webrtc-rs server is listening on for signaling.
}

# --- SERVER BLOCKS ---
# HTTP to HTTPS Redirect
server {
  listen 80;
  server_name dev.local;
  #return 301 https://$host$request_uri;
  return 302 https://$server_name$request_uri;
}

# HTTPS Server with HTTP/2 and HTTP/3 (QUIC)
server {
  # Listen on port 443 for TCP traffic (HTTP/1.1 and HTTP/2)
  listen 443 ssl;
  # Listen on the same port for UDP traffic (QUIC/HTTP/3)
  # 'reuseport' is crucial for multiple worker processes with QUIC.
  listen 443 quic reuseport;

  http2 on;

  server_name dev.local;
  proxy_intercept_errors on;
  # error_page 502 = @serve_frontend_static;

  # SSL Certificates
  ssl_certificate /var/www/bintelx/bintelx/config/server/dev.local.crt;
  ssl_certificate_key /var/www/bintelx/bintelx/config/server/dev.local.key;

  # QUIC/HTTP3 Specific Directives (Experimental)
  quic_retry on;     # Enable address validation for QUIC connections
  ssl_early_data on;   # Enable 0-RTT (requires QUIC-compatible SSL library like QuicTLS)
  quic_gso on;       # Enable Generic Segmentation Offloading (Linux-specific, needs kernel/NIC support)
  #quic_host_key /path/to/your/quic_host_key_file; # Optional: set a host key for various tokens (generate this file)

  # HTTP/3 & QUIC Specific Header for browser advertisement
  # Tells clients that this host supports HTTP/3 on port 443 (h3) and that this record is valid for 24 hours (ma=86400).
  add_header Alt-Svc 'h3=":443"; ma=86400' always; # 'always' ensures it's added even for error responses.

  # Security Headers (Best Practices)
  add_header Strict-Transport-Security "max-age=63072000; includeSubDomains; preload" always;
  add_header X-Frame-Options "SAMEORIGIN" always;
  add_header X-Content-Type-Options "nosniff" always;
  add_header X-XSS-Protection "1; mode=block" always;

  # Uncomment and configure properly for your app's needs
  # add_header Content-Security-Policy "default-src 'self'; script-src 'self'; style-src 'self' 'unsafe-inline'; img-src 'self' data:; font-src 'self'; connect-src 'self' ws: wss:; media-src 'self';" always; # Uncomment and configure properly for your app's needs

  # --- Static Files  ---
  #root /var/www/bintelx/app/dist; # Adjust to your PWA's build output directory (e.g., 'dist', 'build')
  root /var/www/bintelx/app;
  index index.html;

  # Main location for serving the frontend PWA.
  location / {
    error_page 502 = @serve_frontend_static;
    proxy_pass http://bintelx_front;
    proxy_set_header Host $host;
    proxy_set_header X-Real-IP $remote_addr;
    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    proxy_set_header X-Forwarded-Proto $scheme;
    proxy_http_version 1.1; # For WebSockets/hot-reloading
    proxy_set_header Upgrade $http_upgrade;
    proxy_set_header Connection "Upgrade";

    # Add timeouts to quickly fail if dev server is not running
    proxy_connect_timeout 1s;
    proxy_send_timeout 1s;
    proxy_read_timeout 1s;
    # proxy_next_upstream error timeout invalid_header http_500 http_502 http_503 http_504 http_404; # These are for *backend-returned* errors
    # proxy_next_upstream_tries 1;
  }

  # Static Files
  # --- PHP -> Python Fallback ---
  location /api/ {
    # Directives for NGINX to retry other upstream servers upon certain errors.
    # If the primary PHP backend returns these, it will try the backup PHP, then Python.
    proxy_next_upstream error timeout invalid_header http_500 http_502 http_503 http_504 http_404;
    proxy_next_upstream_tries 3; # Max attempts to try another upstream server
    proxy_next_upstream_timeout 10s; # Timeout for trying next upstream server

    try_files $uri $uri/ /api.php$is_args$args;
    # Standard proxy headers
    proxy_set_header Host $host;
    proxy_set_header X-Real-IP $remote_addr;
    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    proxy_set_header X-Forwarded-Proto $scheme;
  }

  # --- Locations ---
  # WebSockets over HTTP/3 is not yet standardized, so these typically use HTTP/2 or HTTP/1.1.
  location /ws/ {
    proxy_pass http://127.0.0.1:8000; # Assuming your app handles general WebSockets
    proxy_http_version 1.1;
    proxy_set_header Upgrade $http_upgrade; # Essential for WebSocket upgrade handshake
    proxy_set_header Connection "Upgrade"; # Essential for WebSocket upgrade handshake
    proxy_set_header Host $host;
    proxy_read_timeout 86400; # Keep connection open for a long time
  }
  # Stream & SSE Location (dedicated to Python)
  location /stream/ {
      proxy_pass http://stream_backend;
      proxy_http_version 1.1; # Keep-alive connection for streaming
      proxy_set_header Host $host;
      proxy_set_header X-Real-IP $remote_addr;
      proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
      proxy_set_header X-Forwarded-Proto $scheme;
      proxy_read_timeout 86400; # Long timeout for streams
  }
  # WebRTC signaling connection
  location /wrtc/ {
    proxy_pass http://webrtc_signaling_server;
    proxy_http_version 1.1;
    proxy_set_header Upgrade $http_upgrade;
    proxy_set_header Connection "Upgrade";
    proxy_set_header Host $host;
    proxy_set_header X-Real-IP $remote_addr;
    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    proxy_read_timeout 86400;
  }

  # --- Processors
  location ~ \.php$ {
    try_files $uri =404;
    fastcgi_split_path_info ^(.+\.php)(/.+)$;
    fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;
    fastcgi_param SCRIPT_NAME $fastcgi_script_name;
    fastcgi_param PATH_INFO $fastcgi_path_info;
    include fastcgi_params;
    fastcgi_pass api_backend;
  }

  # --- Security: Deny access to sensitive directories ---
  location ~ ^/bintelx/ {
    deny all;
  }
  location ~ ^/log/ {
      deny all;
  }
  location ~ ^/custom/ {
      deny all;
  }
  location = /robots.txt  { access_log off; log_not_found off; }
  location = /favicon.ico { access_log off; log_not_found off; }
  # --- Custom Error Pages ---
  error_page 404 /404.html;
  location = /404.html {
    internal;
  }
  error_page 500 502 503 504 /50x.html;
  location = /50x.html {
    internal;
  }
}


# Bintelx_front or static server
server {
  listen 8081; # Listen on a distinct port for dev access
  server_name dev.local;
  http2 on;

  # QUIC/HTTP3 Specific Directives (Experimental)
  quic_retry on;     # Enable address validation for QUIC connections
  ssl_early_data on;   # Enable 0-RTT (requires QUIC-compatible SSL library like QuicTLS)
  quic_gso on;       # Enable Generic Segmentation Offloading (Linux-specific, needs kernel/NIC support)
  #quic_host_key /path/to/your/quic_host_key_file; # Optional: set a host key for various tokens (generate this file)

  # HTTP/3 & QUIC Specific Header for browser advertisement
  # Tells clients that this host supports HTTP/3 on port 443 (h3) and that this record is valid for 24 hours (ma=86400).
  add_header Alt-Svc 'h3=":443"; ma=86400' always; # 'always' ensures it's added even for error responses.

  # Security Headers (Best Practices)
  add_header Strict-Transport-Security "max-age=63072000; includeSubDomains; preload" always;
  add_header X-Frame-Options "SAMEORIGIN" always;
  add_header X-Content-Type-Options "nosniff" always;
  add_header X-XSS-Protection "1; mode=block" always;

  root /var/www/bintelx_front/bintelx_front/dist/;
  location / {
    try_files $uri $uri/ /index.html;
  }
}
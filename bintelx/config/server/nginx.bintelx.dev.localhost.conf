# /var/www/bintelx/bintelx/config/server/nginx.dev.local.conf;
# --- UPSTREAMS ---
include /var/www/bintelx/bintelx/config/server/snippets/upstreams.conf;
# --- SERVER BLOCKS ---
# HTTPS Server with HTTP/2 and HTTP/3 (QUIC)
server {
  server_name dev.local;
  root /var/www/bintelx/app;
  # Protocol
  listen 443 ssl; # HTTP/1.1
  http2 on; # HTTP2
  include /var/www/bintelx/bintelx/config/server/snippets/http3.conf; # QUIC/HTTP3
  # Main location for serving the frontend PWA.
  location / {
    #error_page 502 = @serve_frontend_static;
    proxy_pass http://bintelx_front;
    include /var/www/bintelx/bintelx/config/server/snippets/proxy.conf;
    proxy_set_header Upgrade $http_upgrade;
    proxy_set_header Connection "Upgrade";
    # Add timeouts to quickly fail if dev server is not running
    proxy_connect_timeout 3s;
    proxy_send_timeout 3s;
    proxy_read_timeout 3s;
    # proxy_next_upstream error timeout invalid_header http_500 http_502 http_503 http_504 http_404; # These are for *backend-returned* errors
    # proxy_next_upstream_tries 1;
  }
  # Apps
  location /api/ {
    try_files $uri $uri/ /api.php$is_args$args;
    # Directives for NGINX to retry other upstream servers upon certain errors.
    # If the primary PHP backend returns these, it will try the backup PHP, then Python.
    proxy_next_upstream error timeout invalid_header http_500 http_502 http_503 http_504 http_404;
    proxy_next_upstream_tries 3; # Max attempts to try another upstream server
    proxy_next_upstream_timeout 10s; # Timeout for trying next upstream server

   # these proxy_* timeouts are not used If using fastcgi_pass directly,
    proxy_connect_timeout 5s;
    proxy_send_timeout 5s;
    proxy_read_timeout 60s;
    # Standard proxy headers
    include /var/www/bintelx/bintelx/config/server/snippets/proxy.conf;
  }
  # WebSockets over HTTP/3 is not yet standardized, so these typically use HTTP/2 or HTTP/1.1.
  location /ws/ {
    proxy_pass http://stream_backend;
    proxy_set_header Upgrade $http_upgrade;
    proxy_set_header Connection "Upgrade";
    include /var/www/bintelx/bintelx/config/server/snippets/proxy.conf;
    proxy_read_timeout 86400; # Keep connection for 24 hours
  }
  # Stream & SSE Location
  location /stream/ {
    proxy_pass http://stream_backend;
    include /var/www/bintelx/bintelx/config/server/snippets/proxy.conf;
    proxy_read_timeout 86400; # Keep connection for 24 hours
  }
  # WebRTC signaling connection
  location /wrtc/ {
    proxy_pass http://webrtc_signaling_server;
    proxy_set_header Upgrade $http_upgrade;
    proxy_set_header Connection "Upgrade";
    include /var/www/bintelx/bintelx/config/server/snippets/proxy.conf;
    proxy_read_timeout 86400; # Keep connection for 24 hours
  }
  # --- Processors
  location ~ \.php$ {
    try_files $uri =404;
    fastcgi_split_path_info ^(.+\.php)(/.+)$;
    fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;
    fastcgi_param SCRIPT_NAME $fastcgi_script_name;
    fastcgi_param PATH_INFO $fastcgi_path_info;
    include fastcgi_params;
    fastcgi_read_timeout 60s; # create `location ~ ^/api/long-process-endpoint\.php` to handle long running scripts
    fastcgi_pass api_backend;
    # fastcgi_next_upstream error timeout invalid_header http_500 http_502 http_503 http_504;
    # fastcgi_next_upstream_tries 2;
    # fastcgi_next_upstream_timeout 15s;
  }
  # --- Error Handling ---
  # error_page 502 = @serve_frontend_static;
  proxy_intercept_errors on;
  error_page 404 /404.html;
  location = /404.html {
    internal;
  }
  error_page 500 502 503 504 /50x.html;
  location = /50x.html {
    internal;
  }
  # Security
  include /var/www/bintelx/bintelx/config/server/snippets/location-rules.conf;
  include /var/www/bintelx/bintelx/config/server/snippets/security.conf;
  include /var/www/bintelx/bintelx/config/server/snippets/ssl.conf;
}
# Bintelx_front or Static Files
server {
  server_name dev.local;
  root /var/www/bintelx_front/bintelx_front/dist/;
  index index.html;
  # Protocol
  listen 8081; # HTTP/1.1 without
  # Locations Rules
  include /var/www/bintelx/bintelx/config/server/snippets/location-rules.conf;
  location / {
    try_files $uri $uri/ /index.html;
  }
}
# HTTP to HTTPS Redirect
server {
  listen 80;
  server_name dev.local;
  #return 301 https://$host$request_uri;
  return 302 https://$server_name$request_uri;
}
